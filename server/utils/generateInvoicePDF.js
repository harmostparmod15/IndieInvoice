const PDFDocument = require("pdfkit");
const { Writable } = require("stream");

const formatINR = (amount) => `INR ${amount.toLocaleString("en-IN")}`;

const generateInvoicePDF = (invoice, client) => {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument({ size: "A4", margin: 50 });
    const chunks = [];

    const stream = new Writable({
      write(chunk, encoding, callback) {
        chunks.push(chunk);
        callback();
      },
    });

    doc.pipe(stream);

    // === Header ===
    doc
      .fontSize(22)
      .fillColor("#1f2937")
      .text("IndieInvoice", { align: "left" })
      .fontSize(12)
      .fillColor("gray")
      .text("www.indieinvoice.com")
      .moveDown(1);

    // === Invoice Details ===
    doc
      .fillColor("black")
      .fontSize(12)
      .text(`Invoice No: #${invoice.invoiceNumber}`)
      .text(
        `Date Issued: ${new Date(invoice.invoiceDate).toLocaleDateString(
          "en-IN"
        )}`
      )
      .text(
        `Due Date: ${new Date(invoice.dueDate).toLocaleDateString("en-IN")}`
      )
      .moveDown();

    // === Client Info ===
    doc
      .fontSize(14)
      .fillColor("#1f2937")
      .text("Billed To", { underline: true })
      .moveDown(0.3)
      .fontSize(12)
      .fillColor("black");

    if (client) {
      doc.text(client.name || "N/A");
      if (client.companyName) doc.text(client.companyName);
      if (client.email) doc.text(client.email);
      if (client.phone) doc.text(client.phone);
      if (client.address) doc.text(client.address);
    } else {
      doc.text("N/A");
    }

    doc.moveDown(1.5);

    // === Services Header Table ===
    const tableTop = doc.y;
    const col1 = 50,
      col2 = 300,
      col3 = 400,
      col4 = 480;

    doc
      .font("Helvetica-Bold")
      .fontSize(12)
      .text("Description", col1, tableTop)
      .text("Qty", col2, tableTop)
      .text("Price", col3, tableTop)
      .text("Amount", col4, tableTop);

    doc
      .moveTo(col1, tableTop + 15)
      .lineTo(550, tableTop + 15)
      .stroke();

    doc.moveDown(0.5).font("Helvetica");

    // === Services List ===
    invoice.services.forEach((service, index) => {
      const y = tableTop + 30 + index * 25;
      const total = service.price * service.quantity;

      doc
        .text(service.name, col1, y)
        .text(service.quantity.toString(), col2, y)
        .text(formatINR(service.price), col3, y)
        .text(formatINR(total), col4, y);
    });

    const subtotal = invoice.services.reduce(
      (sum, s) => sum + s.quantity * s.price,
      0
    );

    const discountValue =
      invoice.discount?.type === "percent"
        ? (subtotal * invoice.discount.value) / 100
        : invoice.discount.value;

    const discountedSubtotal = subtotal - discountValue;
    const taxAmount = (discountedSubtotal * invoice.taxRate) / 100;
    const totalDue = Math.round(discountedSubtotal + taxAmount);

    // === Horizontal line before totals ===
    doc.moveDown(2);
    doc.moveTo(350, doc.y).lineTo(550, doc.y).stroke();

    // === Totals Section ===
    doc
      .fontSize(12)
      .font("Helvetica")
      .text(`Subtotal:`, 400, doc.y + 10, { continued: true })
      .text(formatINR(subtotal), { align: "right" })

      .text(
        `Discount (${
          invoice.discount.type === "percent"
            ? invoice.discount.value + "%"
            : formatINR(invoice.discount.value)
        }):`,
        400,
        doc.y + 5,
        { continued: true }
      )
      .text(`-${formatINR(discountValue)}`, { align: "right" })

      .text(`GST (${invoice.taxRate}%):`, 400, doc.y + 5, { continued: true })
      .text(formatINR(taxAmount), { align: "right" });

    doc
      .moveDown(0.5)
      .font("Helvetica-Bold")
      .fontSize(14)
      .text(`Total Due:`, 400, doc.y + 5, { continued: true })
      .text(formatINR(totalDue), { align: "right" });

    // === Notes ===
    if (invoice.notes) {
      doc
        .moveDown(2)
        .font("Helvetica")
        .fontSize(11)
        .fillColor("gray")
        .text(`Notes: ${invoice.notes}`);
    }

    // === Footer ===
    doc
      .moveDown(3)
      .fontSize(10)
      .fillColor("gray")
      .text("Thank you for your business!", { align: "center" })
      .text("Generated by IndieInvoice", { align: "center" });

    doc.end();

    stream.on("finish", () => resolve(Buffer.concat(chunks)));
    stream.on("error", reject);
  });
};

module.exports = generateInvoicePDF;
